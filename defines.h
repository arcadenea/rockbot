#ifndef DEFINES_H
#define DEFINES_H

#define FRAMES_PER_SECOND 35

#define RES_W 320
#define RES_H 240

#define UNUSED(x) (void)x

enum e_PLAYERS {
    PLAYER_ROCKBOT,
    PLAYER_BETABOT,
    PLAYER_CANDYBOT,
    PLAYER_KITTYBOT
};

#define WALK_FRAME_DELAY 100

// ==================== PHYSICS ==================== //









// stages
/// @TODO: will be recplaced by file_game
/**
 * @brief
 *
 */
enum STAGE_LIST {
    INTRO_STAGE, APEBOT, DAISIEBOT, SEAHORSEBOT, MUMMYBOT, MAGEBOT, DYNAMITEBOT, SPIKEBOT, TECHNOBOT, SKULLCASTLE1, SKULLCASTLE2, SKULLCASTLE3, SKULLCASTLE4, SKULLCASTLE5, STAGE_COUNT
};


/**
 * @brief
 *
 */
enum COLISION_TYPES { BLOCK_UNBLOCKED, BLOCK_X, BLOCK_Y, BLOCK_XY, BLOCK_STAIR_X, BLOCK_STAIR_Y, BLOCK_WATER, BLOCK_MOVE_LEFT, BLOCK_MOVE_RIGHT };

/**
 * @brief
 *
 */
enum JUMP_STATES { NO_JUMP, JUMP_UP, JUMP_DOWN };

#define TIME_MOVES 0

enum E_INPUT_TYPES {
    INPUT_TYPE_DOUBLE,
    INPUT_TYPE_KEYBOARD,
    INPUT_TYPE_JOYSTICK
};

/**
 * @brief
 *
 */
enum E_INPUT_MODES {
	INPUT_MODE_DOUBLE, // uses both keyboard and joystick
    INPUT_MODE_ANALOG,
    INPUT_MODE_DIGITAL
};

enum E_PLATFORM {
    PLATFORM_PS2,
    PLATFORM_WII,
    PLATFORM_PSP,
    PLATFORM_LINUX,
    PLATFORM_WINDOWS,
    PLATFORM_DINGUX,
    PLATFORM_PANDORA,
	PLATFORM_DREAMCAST
};


/**
 * @brief
 *
 */
enum INPUT_COMMANDS { BTN_UP, BTN_DOWN, BTN_LEFT, BTN_RIGHT, BTN_JUMP, BTN_ATTACK, BTN_QUIT, BTN_START, BTN_L, BTN_R, BTN_DASH, BTN_SHIELD, BTN_JUMP_TIMER, BTN_COUNT };

/**
 * @brief
 *
 */
enum ANIM_DIRECTION {
    ANIM_DIRECTION_LEFT,
    ANIM_DIRECTION_RIGHT,
    ANIM_DIRECTION_UP,
    ANIM_DIRECTION_DOWN,
    ANIM_DIRECTION_UP_LEFT,
    ANIM_DIRECTION_UP_RIGHT,
    ANIM_DIRECTION_DOWN_LEFT,
    ANIM_DIRECTION_DOWN_RIGHT,
    ANIM_DIRECTION_COUNT };


#define CHAR_ANIM_DIRECTION_COUNT 2 // characters use only left/right, not like projectiles

/**
 * @brief
 *
 */
enum ANIM_TYPE { ANIM_TYPE_STAND,
				 ANIM_TYPE_WALK,
				 ANIM_TYPE_JUMP,
				 ANIM_TYPE_ATTACK,
				 ANIM_TYPE_TELEPORT,
				 ANIM_TYPE_JUMP_ATTACK,
				 ANIM_TYPE_WALK_ATTACK,
				 ANIM_TYPE_HIT,
				 ANIM_TYPE_STAIRS,
				 ANIM_TYPE_STAIRS_SEMI,
				 ANIM_TYPE_STAIRS_ATTACK,
				 ANIM_TYPE_STAIRS_MOVE,
                 ANIM_TYPE_THROW,
				 ANIM_TYPE_TURN,
				 ANIM_TYPE_MOVE_SEMI, // like turn, the start of the movement
				 ANIM_TYPE_WALK_AIR, // for those that can walk on air
				 ANIM_TYPE_INTRO, // for bosses
                 ANIM_TYPE_SPECIAL_ATTACK, // for bosses, charging weapon, etc
                 ANIM_TYPE_SLIDE,
				 ANIM_TYPE_SHIELD,
                 ANIM_TYPE_VERTICAL_TURN,
                 ANIM_TYPE_ATTACK_THROW,
                 ANIM_TYPE_ATTACK_DIAGONAL_UP,
                 ANIM_TYPE_ATTACK_DIAGONAL_DOWN,
                 ANIM_TYPE_ATTACK_UP,
                 ANIM_TYPE_ATTACK_DOWN,
                 ANIM_TYPE_ATTACK_SPECIAL, // (hadouken, shouryuken, etc)
                 ANIM_TYPE_LOOK_UP,
                 ANIM_TYPE_GRAB_WALL,
                 ANIM_TYPE_COUNT };

// alguns como attack_trhow e throw; e special attack e attack_special est√£o repetidos. fica de reserva futura


#define ANIM_FRAMES_COUNT 10 // max number of animation frames for each animation_type

#define MAP_W 200 // this size was determined by looking at common maps from games
#define MAP_H 15
#define FORMAT202_MAP_H 13

#define TILESIZE 16

// for pre-loading


/**
 * @brief
 *
 */
enum INTRO_SURFACES_ENUM {
    INTRO_SURFACES_PRESENTS, //presents.png
    INTRO_SURFACES_UPPERLAND, //upperland.png
	INTRO_SURFACES_CITY_BG, //scenes/city_bg.png
	INTRO_SURFACES_KANOTUS, //sprites/canotus.png
	INTRO_SURFACES_ROCKBOT, //sprites/p1.png
	INTRO_SURFACES_BETABOT, //sprites/p2.png
	INTRO_SURFACES_LAB_BG, //scenes/lab_intro1.png
	INTRO_SURFACES_INTRO_SCREEN, //logo.png
	INTRO_SURFACES_PLAYER_SELECT_BG, //backgrounds/player_select.png
	INTRO_SURFACES_PLAYER_SELECT_LIGHTS, //backgrounds/lights.png
	INTRO_SURFACES_CAPSULES, //backgrounds/capsules.png
	INTRO_SURFACES_ROCKBOT_BIG, //scenes/rockbot.png
	INTRO_SURFACES_ROCKBOT_BIG_HALF_SLEEP, //scenes/rockbot_half_sleep.png
	INTRO_SURFACES_ROCKBOT_BIG_FULL_SLEEP, //scenes/rockbot_full_sleep.png
	INTRO_SURFACES_BETABOT_BIG, //scenes/betabot.png
	INTRO_SURFACES_KANOTUS_BIG, //scenes/kanotus.png


	/// Last line
	INTRO_SURFACES_COUNT
};

/**
 * @brief
 *
 */
enum STAGE_SELECT_ENUM {
	INTRO_SURFACES_STAGE_SELECT_BG,
	STAGE_SELECT_COUNT
};

// sound
/**
 * @brief
 *
 */
enum SFX_LIST {
	SFX_NPC_HIT,
	SFX_NPC_KILLED,
	SFX_PLAYER_HIT,
	SFX_PLAYER_SHOT,
	SFX_PLAYER_JUMP,
	SFX_CURSOR,
	SFX_STAGE_SELECTED,
	SFX_GOT_ENERGY,
	SFX_GOT_ITEM,
	SFX_SHOT_REFLECTED,
	SFX_DOOR_OPEN,
	SFX_GOT_WEAPON,
	SFX_TELEPORT,
	SFX_IMPLOSION,
	SFX_PLAYER_DEATH,
	SFX_DESTRIN_SHIP,
	SFX_TRAIN_CHUNK,
	SFX_SKULL_CASTLE_INTRO,
	SFX_PLAYER_CHARGED_SHOT,
	SFX_CHARGING1,
	SFX_CHARGING2,
	SFX_BIG_EXPLOSION,
	SFX_WATER_ENTER,
	SFX_WATER_LEAVE,
    SFX_DISAPPEARING_BLOCK,
    SFX_HADOUKEN_GIRL,
    SFX_SHORYUKEN_GIRL,
    SFX_BEAM,
	SFX_COUNT // not used as sfx, this is a way to measure size of the enum list
};

/**
 * @brief
 *
 */
enum TERRAIN_TYPES {
	TERRAIN_UNBLOCKED,
	TERRAIN_SOLID,
	TERRAIN_STAIR,
	TERRAIN_DOOR,
	TERRAIN_SPIKE,
	TERRAIN_WATER,
	TERRAIN_ICE,
	TERRAIN_MOVE_LEFT,
	TERRAIN_MOVE_RIGHT,
	TERRAIN_SAND,
	TERRAIN_SCROLL_LOCK,
	TERRAIN_CHECKPOINT,
	TERRAIN_TYPES_COUNT
};


#define CURSOR_SPACING 12

#define NPC_FRAME_NUMBER 50


/**
 * @brief
 *
 */
enum ITEM_ICONS_ENUM {
	ENERGY_TANK,
	P1_1LIFE,
	P2_1LIFE,
	WEAPONS_TANK
};



enum WEAPON_ICONS_ENUM {
    WEAPON_DEFAULT,
    WEAPON_APEBOT,
    WEAPON_DAISIEBOT,
    WEAPON_DYNAMITEBOT,
    WEAPON_MUMMYBOT,
    WEAPON_SPIKEBOT,
    WEAPON_TECHNOBOT,
    WEAPON_MAGEBOT,
    WEAPON_SEAHORSEBOT,
    WEAPON_ITEM_COIL,
    WEAPON_ITEM_JET,
	WEAPON_COUNT
};

/**
 * @brief
 *
 */
enum transition_types {
	NO_TRANSITION,
	TRANSITION_TOP_TO_BOTTOM,
	TRANSITION_BOTTOM_TO_TOP,
	TRANSITION_LEFT_TO_RIGHT,
	TRANSITION_RIGHT_TO_LEFT
};

/**
 * @brief
 *
 */
enum OBJECT_TYPE {
	OBJ_MOVING_PLATFORM_UPDOWN,
	OBJ_MOVING_PLATFORM_LEFTRIGHT,
	OBJ_DISAPPEARING_BLOCK,
	OBJ_ENERGY_TANK,
	OBJ_WEAPON_TANK,
	OBJ_ENERGY_PILL_BIG,
	OBJ_WEAPON_PILL_BIG,
	OBJ_ENERGY_PILL_SMALL,
	OBJ_WEAPON_PILL_SMALL,
	OBJ_LIFE,
	OBJ_FALL_PLATFORM,
	OBJ_FLY_PLATFORM,
	OBJ_ITEM_FLY,
	OBJ_ITEM_JUMP,
    OBJ_ACTIVE_DISAPPEARING_BLOCK, // disappear only after player activates it
    OBJ_ARMOR_ARMS,
    OBJ_ARMOR_BODY,
    OBJ_ARMOR_LEGS,
    OBJ_RAY_HORIZONTAL,
    OBJ_RAY_VERTICAL,
    OBJ_TRACK_PLATFORM,
    OBJ_BOSS_TELEPORTER,
    OBJ_DESTRUCTIBLE_WALL,
    OBJ_SPECIAL_TANK,
    OBJ_DEATHRAY_VERTICAL,
    OBJ_DEATHRAY_HORIZONTAL,
    OBJ_FINAL_BOSS_TELEPORTER,
	OBJ_TYPE_COUNT
};

/**
 * @brief
 *
 */
enum OBJ_STATE {
	OBJ_STATE_STAND,
	OBJ_STATE_MOVE,
	OBJ_STATE_RETURN,
	OBJ_STATE_COUNT
};

/**
 * @brief
 *
 */
enum LINK_TYPES { LINK_HORIZONTAL, LINK_VERTICAL, LINK_TELEPORTER, LINK_BOSS_TELEPORTER, LINK_FINAL_BOSS_ROOM, LINK_TYPE_COUNT };

#define DOOR_MOVE_STEP 2

#define TRANSITION_STEP 3

#define PLAYER_INITIAL_HP 28

#define HIT_BLINK_ANIMATION_LAPSE 200

#define WATER_SPEED_MULT 0.9

#define ATTACK_DELAY 300 // how many milisseconds the attack frame must last before returning to stand/jump/walk

/**
 * @brief
 *
 */
enum PROJECTILE_TRAJECTORIES {
	TRAJECTORY_LINEAR,
	TRAJECTORY_ARC,
	TRAJECTORY_SIN,
	TRAJECTORY_CHAIN,
	TRAJECTORY_QUAKE,
	TRAJECTORY_BOMB,
	TRAJECTORY_FOLLOW,
	TRAJECTORY_PROGRESSIVE,
	TRAJECTORY_FREEZE,
	TRAJECTORY_DIAGONAL_UP,
	TRAJECTORY_DIAGONAL_DOWN,
    TRAJECTORY_CENTERED,                // centered around character
    TRAJECTORY_ZIGZAG,                  // linear until reach a wall, then return (repeat until reflection number = 3)
    TRAJECTORY_TARGET_DIRECTION,        // adjust to linear, diagonal up or diagonal down depending on player position when shoot
    TRAJECTORY_ARC_TO_TARGET,           // forms an arn that will end at player's position
    TRAJECTORY_TARGET_EXACT,            // will go exactly to the point the target is in
    TRAJECTORY_FALL_BOMB,               // falls until ground then explodes
    TRAJECTORY_LASER,
	PROJECTILE_TRAJECTORIES_COUNT };


/**
 * @brief
 *
 */
enum EDITOR_MODES {
	EDITMODE_NORMAL,
	EDITMODE_LOCK,
	EDITMODE_ERASER,
	EDITMODE_FILL,
	EDITMODE_LINK,
	EDITMODE_LINK_DEST,
	EDITMODE_NPC,
	EDITMODE_ADDNPC,
	EDITMODE_STAIRS,
    EDITMODE_OBJECT,
    EDITMODE_SET_BOSS,
    EDITMODE_SET_SUBBOSS,
    EDITMODE_OBJECT_LINK_PLACING
};

/**
 * @brief
 *
 */
enum IA_TYPE_LIST { IA_STAND, IA_WAIT, IA_FOLLOW, IA_ZIGZAG, IA_SIDETOSIDE, IA_BAT, IA_ROOF_SHOOTER, IA_GROUND_SHOOTER, IA_SHOOT_AND_GO, IA_FLY_ZIG_ZAG, IA_BUTTERFLY, IA_HORIZONTAL_GO_AHEAD, IA_HORIZONTAL_TURN, IA_FIXED_JUMPER, IA_SIDE_SHOOTER, IA_GHOST, IA_FISH, IA_DOLPHIN, IA_VERTICAL_ZIGZAG, IA_TYPES_COUNT };


/**
 * @brief
 *
 */
enum IA_STATES {
		IA_INITIAL_STATE,
		IA_STATE_SLEEP,
		IA_STATE_FOLLOW,
		IA_STATE_RETURN,
		IA_STATE_SHOT_RAINBOW,
		IA_STATE_CROSS_SCREEN,
		IA_STATE_SHOT_FLOWER,
		IA_STATE_WAIT_TIME,
		IA_STATE_START_MOVE,
		IA_STATE_START_STAND,
		IA_STATE_INTRO,
		IA_STATE_JUMP_TO_ROOF,
		IA_STATE_JUMP_TO_PLAYER,
		IA_STATE_AIR_WALK,
		IA_STATE_QUAKE_ATTACK,
		IA_STATE_JUMP_FALL,
		IA_STATE_GROUND_ATTACK,
		IA_STATE_TELEPORT,
		IA_STATE_WALK_TO_POINT,
		IA_STATE_CHARGED_DASH,
		IA_STATE_SHOT_STOP_TIME,
		IA_STATE_JUMP_TO_WALL,
		IA_STATE_FLOAT_TO_POINT,
		IA_STATE_COUNT
};

/**
 * @brief
 *
 */
enum IA_CONDITIONALS {
	IA_CONDITION_NO_CONDITION,
	IA_CONDITION_NEAR_PLAYER,
	IA_CONDITION_ABOUT_TO_DIE,
	IA_CONDITION_ABOVE_PLAYER,
	IA_CONDITION_UNDER_PLAYER
};

#define AI_MAX_STATES 8

/**
 * @brief
 *
 */
enum e_shield_types { SHIELD_NO, SHIELD_FULL, SHIELD_FRONT, SHIELD_STAND };

/**
 * @brief
 *
 */
enum e_energy_types { ENERGY_TYPE_HP, ENERGY_TYPE_WEAPON };


#define MAX_PLAYER_SPRITES 23
#define MAX_NPC_SPRITES 15
#define MAX_WEAPON_N 12
#define MAX_STAGES 16
#define MAX_MAP_NPC_N 30
#define GAME_MAX_OBJS 60
#define STAGE_MAX_LINKS 30
#define STAGE_MAX_MAPS 3
#define MAX_AI_TYPES 50
#define MAX_AI_REACTIONS 3

#define CHAR_NAME_SIZE 30
#define CHAR_FILENAME_SIZE 30

#define MAX_FILE_PLAYERS 5

#define MAX_FILE_PROJECTILES 20

#define PROJECTILE_DEFAULT_SPEED 10
#define PROJECTILE_DEFAULT_DAMAGE 1
#define PROJECTILE_DEFAULT_ANIMATION_TIME 100

#define DIALOG_LINE_LIMIT 30
#define EDITOR_DIALOG_LINE_LIMIT 27
#define MAX_PLAYERS 3

#ifdef PLAYSTATION2
    #define JOYVAL 12000
#else
	#define JOYVAL 30000
#endif

// ATUAL: []: tiro, X: pulo, O: dash =>
// DESEJADO: X: ataque, O: pulo, /\: dash

#define ENERGY_ITEM_SMALL 3
#define ENERGY_ITEM_BIG 8

#define MOVING_GROUND 10 //TREADMILL


#define CHARGED_SHOT_INITIAL_TIME 1000
#define CHARGED_SHOT_TIME 2200
#define SUPER_CHARGED_SHOT_TIME 3200

#define TOUCH_DAMAGE_SMALL 2
#define TOUCH_DAMAGE_BIG 4

// from graphiLib
#define WPN_COLUMN1_X 42
#define WPN_COLUMN2_X 182
#define WPN_COLUMN_Y 53
#define WEAPON_SPACING 16


#define _MIXER_THREAD_PRIORITY 3


#define PLAYER_NPC_COLLISION_REDUTOR 6


/**
 * @brief
 *
 */
enum e_game_flags {
	FLAG_QUICKLOAD,
	FLAG_INVENCIBLE,
	FLAG_INFINITE_JUMP,
	FLAG_ALLWEAPONS,
    FLAG_INFINITE_HP,
    FLAG_PLAYER_ROCKBOT,
    FLAG_PLAYER_BETABOT,
    FLAG_PLAYER_CANDYBOT,
    FLAG_PLAYER_KITTYBOT,
	FLAG_COUNT
};


/**
 * @brief
 *
 */
enum AI_ACTION_LIST {
	AI_ACTION_WALK,
	AI_ACTION_FLY,
	AI_ACTION_JUMP,
	AI_ACTION_WAIT_UNTIL_PLAYER_IS_IN_RANGE,
	AI_ACTION_SAVE_POINT,
	AI_ACTION_SHOT_PROJECTILE_1,
	AI_ACTION_SHOT_PROJECTILE_2,
	AI_ACTION_SHOT_INVERT_PROJECTILE_1,
	AI_ACTION_AIR_WALK,
	AI_ACTION_FALL_TO_GROUND,
	AI_ACTION_TELEPORT,
	AI_ACTION_DASH,
	AI_ACTION_GRAB_WALL,
    AI_ACTION_SPAWN_NPC,
	AI_ACTION_LIST_SIZE
};


enum AI_ACTION_SHOT_OPTIONS {
    AI_ACTION_SHOT_FACEPLAYER,
    AI_ACTION_SHOT_AHEAD
};

/*
enum AI_ACTION_OPTIONS_LIST {
    AI_OPTIONS_HORIZONTAL_AHEAD,
    AI_OPTIONS_HORIZONTAL_TURN,
	AI_OPTIONS_UP,
	AI_OPTIONS_DOWN,
	AI_OPTIONS_TO_PLAYER,
	AI_OPTIONS_TO_SAVED_POINT,
	AI_OPTIONS_TO_ROOF,
	AI_OPTIONS_LIST_SIZE
};
*/

/**
 * @brief
 *
 */
enum AI_ACTION_GOTO_LIST {
	AI_ACTION_GOTO_CHANCE,
	AI_ACTION_GOTO_1,
	AI_ACTION_GOTO_2,
	AI_ACTION_GOTO_3,
	AI_ACTION_GOTO_4
};


/**
 * @brief
 *
 */
enum AI_ACTION_WALK_OPTION_LIST {
    AI_ACTION_WALK_OPTION_HORIZONTAL_AHEAD,
    AI_ACTION_WALK_OPTION_HORIZONTAL_TURN, // execute turn animation, ends when animation is compelted
    AI_ACTION_WALK_OPTION_TO_PLAYER,
    AI_ACTION_WALK_OPTION_TO_SAVED_POINT,
    AI_ACTION_WALK_OPTION_TURN_TO_PLAYER
};


/**
 * @brief
 *
 */
enum AI_ACTION_FLY_OPTION_LIST {
    AI_ACTION_FLY_OPTION_HORIZONTAL_AHEAD,
    AI_ACTION_FLY_OPTION_HORIZONTAL_TURN,
    AI_ACTION_FLY_OPTION_UP,
    AI_ACTION_FLY_OPTION_DOWN,
    AI_ACTION_FLY_OPTION_TO_PLAYER,
    AI_ACTION_FLY_OPTION_TO_SAVED_POINT,
    AI_ACTION_FLY_OPTION_TO_RANDOM_POINT,
    AI_ACTION_FLY_OPTION_FALL, // fall until out of screen or hitting ground (ignores distance)
    AI_ACTION_FLY_OPTION_DRILL_DOWN,
    AI_ACTION_FLY_OPTION_VERTICAL_CENTER,
    AI_ACTION_FLY_OPTION_PLAYER_DIRECTION,
    AI_ACTION_FLY_OPTION_OPOSITE_WALL,
    AI_ACTION_FLY_OPTION_OPOSITE_SHOOT_1,
    AI_ACTION_FLY_OPTION_TO_PLAYER_X, // move only in the X axis
    AI_ACTION_FLY_OPTION_TO_PLAYER_Y, // move only in the Y axis
    AI_ACTION_FLY_OPTION_ZIGZAG_AHEAD // similar to horizontal-aahead but moving a bit on Y axias up/down
};

/**
 * @brief
 *
 */
enum AI_ACTION_JUMP_OPTION_LIST {
    AI_ACTION_JUMP_OPTION_AHEAD,
    AI_ACTION_JUMP_OPTION_TO_RANDOM_POINT,
    AI_ACTION_JUMP_OPTION_UP,
    AI_ACTION_JUMP_OPTION_TO_PLAYER,
    AI_ACTION_JUMP_OPTION_TO_ROOF,
    AI_ACTION_JUMP_OPTION_TO_SAVED_POINT,
    AI_ACTION_JUMP_OPTION_ONCE
};

/**
 * @brief
 *
 */
enum AI_ACTION_AIR_WALK_OPTION_LIST {
    AI_ACTION_AIR_WALK_OPTION_LEFT,
    AI_ACTION_AIR_WALK_OPTION_RIGHT,
    AI_ACTION_AIR_WALK_OPTION_TO_PLAYER
};

/**
 * @brief
 *
 */
enum AI_ACTION_TELEPORT_OPTION_LIST {
    AI_ACTION_TELEPORT_OPTION_LEFT,
    AI_ACTION_TELEPORT_OPTION_RIGHT,
    AI_ACTION_TELEPORT_OPTION_TO_PLAYER,
    AI_ACTION_TELEPORT_OPTION_RANDOM_X,
    AI_ACTION_TELEPORT_OPTION_RANDOM_Y,
    AI_ACTION_TELEPORT_OPTION_RANDOM_POINT
};

/**
 * @brief
 *
 */
enum AI_ACTION_DASH_OPTION_LIST {
    AI_ACTION_DASH_OPTION_LEFT,
    AI_ACTION_DASH_OPTION_RIGHT,
    AI_ACTION_DASH_OPTION_TO_PLAYER
};


/**
 * @brief
 *
 */
enum AI_ACTION_GRAB_WALL_OPTION_LIST {
    AI_ACTION_GRAB_WALL_OPTION_LEFT,
    AI_ACTION_GRAB_WALL_OPTION_RIGHT
};

/**
 * @brief
 *
 */
enum DROP_ITEMS_LIST {
    DROP_ITEM_1UP,
    DROP_ITEM_ENERGY_SMALL,
    DROP_ITEM_ENERGY_BIG,
    DROP_ITEM_WEAPON_SMALL,
    DROP_ITEM_WEAPON_BIG,
    DROP_ITEM_COUNT
};

#define COIL_GOT_STAGE 1
#define JET_GOT_STAGE 6

#define PASSWORD_GRID_SIZE 6

#define KEY_MAP_N 7


enum colision_modes {
    COLISION_MODE_XY,
    COLISION_MODE_X,
    COLISION_MODE_Y
};


#define FONT_SIZE 8

#define MENU_CHANGE_DELAY 100

#define QUAKE_SCREEN_MOVE 2

enum FREEZE_EFFECT_TYPES {
    FREEZE_EFFECT_NONE,
    FREEZE_EFFECT_PLAYER,
    FREEZE_EFFECT_NPC
};

/**
 * @brief
 *
 */
enum COLOR_KEYS {
    COLOR_KEY_GREEN,
    COLOR_KEY_PURPLE,
    COLOR_KEY_CYAN,
    COLOR_KEY_LENGTH
};

enum e_VIDEO_FILTERS {
    VIDEO_FILTER_NOSCALE,
    VIDEO_FILTER_BITSCALE,
    VIDEO_FILTER_SCALE2x
};

#define BOSS_HIT_DURATION 800

#define COLORKEY_R 75
#define COLORKEY_G 125
#define COLORKEY_B 125


#define COLOR_COUNT 68

// filesystem defines
#define FS_GAME_MAX_OBJS 40
#define FS_GAME_MAX_NPCS 100
#define FS_MAX_PROJECTILES 30
#define FS_MAX_WEAPONS 20
#define FS_MAX_PLAYERS 4
#define FS_MAX_AI_TYPES 50
#define FS_MAX_STAGES 20

#define FS_CHAR_NAME_SIZE 30
#define FS_CHAR_FILENAME_SIZE 30
#define FS_INI_KEY_SIZE 30

#define FS_FILENAME_SIZE 30
#define FS_NAME_SIZE 30

#define FS_STAGE_MAX_LINKS 30
#define FS_STAGE_MAX_MAPS 3

#define FS_MAX_MAP_NPCS 30
#define FS_MAX_MAP_OBJECTS 30

#define FS_COLORCYCLE_MAX_ITEMS 10

#define FS_NPC_WEAKNESSES 9

#define FS_DIALOG_LINES 3

#define TROPHIES_MAX 10
#define CASTLE_STAGES_MAX 4

#define FS_COLOR_KEYS_N 3
#define FS_NPC_PROJECTILE_N 2


enum e_ARMOR_PIECES {
    ARMOR_ARMS, ARMOR_BODY, ARMOR_LEGS, FS_PLAYER_ARMOR_PIECES_MAX
};

/*
void armor_edit::fill_armor_abilities() {
    std::string arm_abilities[] = {"Super-Shot", "Laser-Beam", "Always-Charged", "Freeze"};
    std::string legs_abilities[] = {"Double Jump", "Air-Dash", "Wall-Grab"};
    std::string body_abilities[] = {"Half-Damage", "Extended Immunity", "Spikes Immune", "No Push-Back"};
 */

enum e_ARMOR_ABILITIES_ARMS {
    ARMOR_ABILITY_ARMS_SUPERSHOT, ARMOR_ABILITY_ARMS_LASERBEAM, ARMOR_ABILITY_ARMS_ALWAYSCHARGED, ARMOR_ABILITY_ARMS_MISSILE
};
enum e_ARMOR_ABILITIES_LEGS {
    ARMOR_ABILITY_LEGS_DOUBLEJUMP, ARMOR_ABILITY_LEGS_AIRDASH, ARMOR_ABILITY_LEGS_SHORYUKEN
};
enum e_ARMOR_ABILITIES_BODY {
    ARMOR_ABILITY_BODY_HALFDAMAGE, ARMOR_ABILITY_BODY_EXTENDEDIMMUNITY, ARMOR_ABILITY_BODY_SPIKESIMMMUNE, ARMOR_ABILITY_BODY_NOPUSHBACK
};

#define FS_ANIM_TILES_MAX 20

#define FS_FACE_FILENAME_MAX 20
#define FS_PLATER_ITEMS_N 2

#define SPIKES_DAMAGE 999

#define CURRENT_FILE_FORMAT format_v_3_0_1

#define EDITMODE_NORMAL 0
#define EDITMODE_LOCK 1
#define EDITMODE_ERASER 2
#define EDITMODE_FILL 3
#define EDITMODE_LINK 4
#define EDITMODE_LINK_DEST 5
#define EDITMODE_NPC 6
#define EDITMODE_ADDNPC 7
#define EDITMODE_STAIRS 8
#define EDITMODE_OBJECT 9



#endif // DEFINES_H


